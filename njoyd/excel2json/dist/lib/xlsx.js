var XLSX=require("./xlsx.full.min");function xlsxJson(e,a){var t,n="undefined"!=typeof FileReader&&void 0!==FileReader.prototype&&void 0!==FileReader.prototype.readAsBinaryString,r=new FileReader;r.onload=function(e){var e=e.target.result,r=void 0;if(n)try{t=XLSX.read(e,{type:"binary",cellDates:!0})}catch(e){r=e}else try{t=XLSX.read(btoa(fixdata(e)),{type:"base64",cellDates:!0})}catch(e){r=e}t?handleJson(t,a):a(1,r)},n?r.readAsBinaryString(e):r.readAsArrayBuffer(e)}function handleJson(e,r){var a=e.SheetNames;const n=e.Sheets,o=[];a.forEach(e=>{var r=n[e],a=r["!merges"]||[],t=XLSX.utils.sheet_to_json(r,{header:1});handleDataFormat(t),a.forEach(e=>{handleMerge(e,t)}),o.push({name:e,list:t})}),r(0,o)}function handleMerge(e,r){var a=e.s,t=e.e;if(a.c===t.c){var n=r[a.r][a.c];for(let e=a.r;e<=t.r;e++)r[e][a.c]=n}else{var o=r[a.r][a.c];for(let e=a.c;e<=t.c;e++)r[a.r][e]=o}}function handleDataFormat(e){e.forEach(a=>{a.forEach((e,r)=>{"object"==typeof e&&(e=new Date(e),isNaN(e.getTime())||(e=`${e.getFullYear()}-${e.getMonth()+1}-`+e.getDate(),a[r]=e))})})}function fixdata(e){for(var r="",a=0,t=10240;a<e.byteLength/t;++a)r+=String.fromCharCode.apply(null,new Uint8Array(e.slice(a*t,a*t+t)));return r+=String.fromCharCode.apply(null,new Uint8Array(e.slice(a*t)))}module.exports={xlsxJson:xlsxJson};